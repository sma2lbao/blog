{"version":3,"file":"component---src-pages-http-set-cookie-mdx-872ec4bc07868d07a565.js","mappings":"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","sources":["webpack://blog/./src/pages/http/set-cookie.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Set-Cookie\",\n  \"slug\": \"/http/set-cookie\",\n  \"tags\": [\"http\"]\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`响应标头 `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`Set-Cookie`}</inlineCode></strong>{` 被用来由服务器端向用户代理发送 cookie，所以用户代理可再后续的请求中将其发送回服务器。服务器要发送多个 cookie，则应该在同一响应中发送多个 `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`Set-Cookie`}</inlineCode></strong>{` 标头。`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`警告：`}</strong>{` 根据 Fetch 规范，`}<inlineCode parentName=\"p\">{`Set-Cookie`}</inlineCode>{` 是一个`}<a parentName=\"p\" {...{\n          \"href\": \"https://fetch.spec.whatwg.org/#forbidden-response-header-name\"\n        }}>{`禁止的响应标头`}</a>{`，对应的响应在被暴露给前端代码前，`}<a parentName=\"p\" {...{\n          \"href\": \"https://fetch.spec.whatwg.org/#ref-for-forbidden-response-header-name%E2%91%A0\"\n        }}>{`必须滤除`}</a>{`这一响应标头，即浏览器会阻止前端 JavaScript 代码访问 `}<inlineCode parentName=\"p\">{`Set-Cookie`}</inlineCode>{` 标头。`}</p>\n    </blockquote>\n    <p>{`更多信息请查阅这篇指南：`}<a parentName=\"p\" {...{\n        \"href\": \"/blog/http/cookies\"\n      }}>{`HTTP cookie`}</a>{`。`}</p>\n    <table className=\"properties\">\n  <tbody>\n    <tr>\n      <th scope=\"row\">标头类型</th>\n      <td>响应标头</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">禁止修改的标头</th>\n      <td>否</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">禁止的响应标头</th>\n      <td>是</td>\n    </tr>\n  </tbody>\n    </table>\n    <h2>{`语法`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Set-Cookie: <cookie-name>=<cookie-value>\nSet-Cookie: <cookie-name>=<cookie-value>; Expires=<date>\nSet-Cookie: <cookie-name>=<cookie-value>; Max-Age=<number>\nSet-Cookie: <cookie-name>=<cookie-value>; Domain=<domain-value>\nSet-Cookie: <cookie-name>=<cookie-value>; Path=<path-value>\nSet-Cookie: <cookie-name>=<cookie-value>; Secure\nSet-Cookie: <cookie-name>=<cookie-value>; HttpOnly\n\nSet-Cookie: <cookie-name>=<cookie-value>; SameSite=Strict\nSet-Cookie: <cookie-name>=<cookie-value>; SameSite=Lax\nSet-Cookie: <cookie-name>=<cookie-value>; SameSite=None; Secure\n\n// Multiple attributes are also possible, for example:\nSet-Cookie: <cookie-name>=<cookie-value>; Domain=<domain-value>; Secure; HttpOnly\n`}</code></pre>\n    <h2>{`指令`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`<cookie-name>=<cookie-value>`}</inlineCode></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`一个 cookie 开始于一个名称/值对：`}</p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<cookie-name>`}</inlineCode>{` 可以是除了控制字符、空格或制表符之外的任何 US-ASCII 字符。同时不能包含以下分隔字符：`}<inlineCode parentName=\"li\">{`( ) < > @ , ; : \\\\ \" / [ ] ? = { }`}</inlineCode>{`。`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<cookie-value>`}</inlineCode>{` 是可选的，如果存在的话，那么需要包含在双引号里面。支持除了控制字符、空格、双引号、逗号、分号以及反斜线之外的任意 US-ASCII 字符。`}</li>\n            </ul>\n            <p parentName=\"li\"><strong parentName=\"p\">{`关于编码`}</strong>{`：许多应用会对 cookie 值按照 URL 编码规则进行编码，但是按照 RFC 规范，这不是必须的。不过满足规范中对于 `}<inlineCode parentName=\"p\">{`<cookie-value>`}</inlineCode>{` 所允许使用的字符的要求是有用的。`}</p>\n            <blockquote parentName=\"li\">\n              <p parentName=\"blockquote\"><strong parentName=\"p\">{`备注：`}</strong>{` 一些 `}<inlineCode parentName=\"p\">{`<cookie-name>`}</inlineCode>{` 具有特殊的语义：`}</p>\n              <p parentName=\"blockquote\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`__Secure-`}</inlineCode>{` 前缀`}</strong>{`：以 `}<inlineCode parentName=\"p\">{`__Secure-`}</inlineCode>{` 为前缀的 cookie（其中连接符是前缀的一部分），必须与 `}<inlineCode parentName=\"p\">{`secure`}</inlineCode>{` 属性一同设置，同时必须应用于安全页面（即使用 HTTPS 访问的页面）。`}</p>\n              <p parentName=\"blockquote\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`__Host-`}</inlineCode>{` 前缀`}</strong>{`：以 `}<inlineCode parentName=\"p\">{`__Host-`}</inlineCode>{` 为前缀的 cookie，必须与 `}<inlineCode parentName=\"p\">{`secure`}</inlineCode>{` 属性一同设置，必须应用于安全页面（即使用 HTTPS 访问的页面），也禁止设置 domain 属性（也就不会发送给子域），同时 path 属性的值必须为 `}<inlineCode parentName=\"p\">{`/`}</inlineCode>{`。`}</p>\n            </blockquote>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Expires=<date>`}</inlineCode>{` (可选)`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`cookie 的最长有效时间，形式为符合 HTTP-date 规范的时间戳。参见 Date 可以获取详细信息。`}</li>\n        </ul>\n        <p parentName=\"li\">{`如果没有设置这个属性，那么表示这是一个`}<strong parentName=\"p\">{`会话期 cookie`}</strong>{`。一个会话结束于客户端被关闭时，这意味着会话期 cookie 在彼时会被移除。`}</p>\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\"><strong parentName=\"p\">{`警告：`}</strong>{` 然而，很多 Web 浏览器支持会话恢复功能，这个功能可以使浏览器保留所有的 tab 标签，然后在重新打开浏览器的时候将其还原。与此同时，cookie 也会恢复，就跟从来没有关闭浏览器一样。`}</p>\n        </blockquote>\n        <p parentName=\"li\">{`如果设置了 `}<inlineCode parentName=\"p\">{`Expires`}</inlineCode>{` 属性，其截止时间与`}<em parentName=\"p\">{`客户端`}</em>{`相关，而非服务器的时间。`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Max-Age=<number>`}</inlineCode>{` (可选)`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`在 cookie 失效之前需要经过的秒数。秒数为 0 或 -1 将会使 cookie 直接过期。假如 `}<inlineCode parentName=\"li\">{`Expires`}</inlineCode>{` 和 `}<inlineCode parentName=\"li\">{`Max-Age`}</inlineCode>{` 属性均存在，那么 `}<inlineCode parentName=\"li\">{`Max-Age`}</inlineCode>{` 的优先级更高。`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Domain=<domain-value>`}</inlineCode>{` (可选)`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`指定 cookie 可以送达的主机名。`}</li>\n        </ul>\n        <p parentName=\"li\">{`假如没有指定，那么默认值为当前文档访问地址中的主机部分（但是不包含子域名）。`}</p>\n        <p parentName=\"li\">{`与之前的规范不同的是，域名（`}<inlineCode parentName=\"p\">{`.example.com`}</inlineCode>{`）之前的点号会被忽略。`}</p>\n        <p parentName=\"li\">{`多个主机/域名的值是`}<em parentName=\"p\">{`不`}</em>{`被允许的，但如果指定了一个域，则其子域也会被包含。`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Path=<path-value>`}</inlineCode>{` (可选)`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`指定一个 URL 路径，这个路径`}<em parentName=\"li\">{`必须`}</em>{`出现在要请求的资源的路径中才可以发送 `}<inlineCode parentName=\"li\">{`Cookie`}</inlineCode>{` 标头。`}</li>\n        </ul>\n        <p parentName=\"li\">{`字符 `}<inlineCode parentName=\"p\">{`/`}</inlineCode>{` 可以解释为文件目录分隔符，此目录的下级目录也满足匹配的条件（例如，如果 `}<inlineCode parentName=\"p\">{`path=/docs`}</inlineCode>{`，那么`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`/docs`}</inlineCode>{`、`}<inlineCode parentName=\"li\">{`/docs/`}</inlineCode>{`、`}<inlineCode parentName=\"li\">{`/docs/Web/`}</inlineCode>{` 和 `}<inlineCode parentName=\"li\">{`/docs/Web/HTTP`}</inlineCode>{` 都满足匹配条件。`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`/`}</inlineCode>{`、`}<inlineCode parentName=\"li\">{`/docsets`}</inlineCode>{` 或者 `}<inlineCode parentName=\"li\">{`/fr/docs`}</inlineCode>{` 则不满足匹配条件。`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Secure`}</inlineCode>{` (可选)`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`一个带有安全属性的 cookie 只有在请求使用 `}<inlineCode parentName=\"p\">{`https:`}</inlineCode>{` 协议（localhost 不受此限制）的时候才会被发送到服务器。以阻止中间人攻击。`}</p>\n            <blockquote parentName=\"li\">\n              <p parentName=\"blockquote\"><strong parentName=\"p\">{`备注：`}</strong>{` 不要假设 `}<inlineCode parentName=\"p\">{`Secure`}</inlineCode>{` 会阻止所有的对 cookie 中敏感信息（session key、登录信息，等等）的访问。携带这一属性的 cookie 在不设置 `}<inlineCode parentName=\"p\">{`HttpOnly`}</inlineCode>{` 的情况下仍能从客户端的硬盘或是从 JavaScript 中访问。`}</p>\n              <p parentName=\"blockquote\">{`非安全站点（`}<inlineCode parentName=\"p\">{`http:`}</inlineCode>{`）已经不能在 cookie 中设置 `}<inlineCode parentName=\"p\">{`Secure`}</inlineCode>{` 属性了（在 Chrome 52 和 Firefox 52 中新引入的限制）。对于 Firefox，`}<inlineCode parentName=\"p\">{`Secure`}</inlineCode>{` 属性的 `}<inlineCode parentName=\"p\">{`https:`}</inlineCode>{` 限制会在域为 localhost 时被忽略（从 Firefox 75 开始）。`}</p>\n            </blockquote>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`HttpOnly`}</inlineCode>{` (可选)`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`用于阻止 JavaScript 通过 Document.cookie 属性访问 cookie。注意，设置了 `}<inlineCode parentName=\"li\">{`HttpOnly`}</inlineCode>{` 的 cookie 在 JavaScript 初始化的请求中仍然会被发送。例如，调用 XMLHttpRequest.send() 或 fetch()。其用于防范跨站脚本攻击（XSS）。`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`SameSite=<samesite-value>`}</inlineCode>{` (可选)`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`允许服务器设定一则 cookie 不随着跨站请求一起发送，这样可以在一定程度上防范跨站请求伪造攻击（CSRF）。`}</li>\n        </ul>\n        <p parentName=\"li\">{`可选的属性值有：`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`Strict`}</inlineCode></p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`这意味浏览器仅对同一站点的请求发送 `}<inlineCode parentName=\"li\">{`cookie`}</inlineCode>{`，即请求来自设置 cookie 的站点。如果请求来自不同的域或协议（即使是相同域），则携带有 `}<inlineCode parentName=\"li\">{`SameSite=Strict`}</inlineCode>{` 属性的 cookie 将不会被发送。`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`Lax`}</inlineCode></p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`这意味着 cookie 不会在跨站请求中被发送，如：加载图像或 frame 的请求。但 cookie 在用户从外部站点导航到源站时，cookie 也将被发送（例如，跟随一个链接）。这是 `}<inlineCode parentName=\"li\">{`SameSite`}</inlineCode>{` 属性未被设置时的默认行为。`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`None`}</inlineCode></p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`这意味着浏览器会在跨站和同站请求中均发送 cookie。在设置这一属性值时，必须同时设置 `}<inlineCode parentName=\"li\">{`Secure`}</inlineCode>{` 属性，就像这样：`}<inlineCode parentName=\"li\">{`SameSite=None; Secure`}</inlineCode>{`。`}</li>\n            </ul>\n            <blockquote parentName=\"li\">\n              <p parentName=\"blockquote\"><strong parentName=\"p\">{`备注：`}</strong>{` 与 `}<a parentName=\"p\" {...{\n                  \"href\": \"/blog/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite\"\n                }}>{`SameSite Cookie`}</a>{` 相关的标准作了如下变动：`}</p>\n              <ol parentName=\"blockquote\">\n                <li parentName=\"ol\"><inlineCode parentName=\"li\">{`SameSite`}</inlineCode>{` 属性未被指定时，其默认行为是 `}<inlineCode parentName=\"li\">{`SameSite=Lax`}</inlineCode>{`。在过去，若未指定，所有的 cookie 均会被发送。`}</li>\n                <li parentName=\"ol\">{`现在，携带 `}<inlineCode parentName=\"li\">{`SameSite=None`}</inlineCode>{` 属性的 cookie 必须同时设置 `}<inlineCode parentName=\"li\">{`Secure`}</inlineCode>{` 属性（换句话说，其仅能用于安全上下文）`}</li>\n                <li parentName=\"ol\">{`来自同一域的 cookie 若使用了不同的协议（`}<inlineCode parentName=\"li\">{`http:`}</inlineCode>{` 或 `}<inlineCode parentName=\"li\">{`HTTPS:`}</inlineCode>{`），将不再被视为来自同一站点。`}</li>\n              </ol>\n              <p parentName=\"blockquote\">{`参见浏览器兼容性表以了解不同浏览器的实线情况（行：“`}<inlineCode parentName=\"p\">{`SameSite`}</inlineCode>{`: Defaults to `}<inlineCode parentName=\"p\">{`Lax`}</inlineCode>{`”、“`}<inlineCode parentName=\"p\">{`SameSite`}</inlineCode>{`: Secure context required”和“`}<inlineCode parentName=\"p\">{`SameSite`}</inlineCode>{`: URL scheme-aware (\"schemeful\")”）。`}</p>\n            </blockquote>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <h2>{`示例`}</h2>\n    <h3>{`会话期 cookie`}</h3>\n    <p><strong parentName=\"p\">{`会话期 cookie`}</strong>{` 将会在客户端关闭时被移除。会话期 cookie 不设置 `}<inlineCode parentName=\"p\">{`Expires`}</inlineCode>{` 或 `}<inlineCode parentName=\"p\">{`Max-Age`}</inlineCode>{` 属性。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Set-Cookie: sessionId=38afes7a8\n`}</code></pre>\n    <h3>{`持久化 cookie`}</h3>\n    <p><strong parentName=\"p\">{`持久化 cookie`}</strong>{` 不会在客户端关闭时失效，而是在特定的日期（`}<inlineCode parentName=\"p\">{`Expires`}</inlineCode>{`）或者经过一段特定的时间之后（`}<inlineCode parentName=\"p\">{`Max-Age`}</inlineCode>{`）才会失效。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Set-Cookie: id=a3fWa; Max-Age=2592000\n`}</code></pre>\n    <h3>{`非法域`}</h3>\n    <p>{`属于特定域的 cookie，假如域名不能涵盖原始服务器的域名，那么`}<a parentName=\"p\" {...{\n        \"href\": \"https://tools.ietf.org/html/rfc6265#section-4.1.2.3\"\n      }}>{`应该被用户代理拒绝`}</a>{`。`}</p>\n    <p>{`以下的 cookie 假如是被域名为 `}<inlineCode parentName=\"p\">{`originalcompany.com`}</inlineCode>{` 的服务器设置的，则会被拒绝：`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Set-Cookie: qwerty=219ffwef9w0f; Domain=somecompany.co.uk\n`}</code></pre>\n    <p>{`服务器尝试为其域名的子域名设置的 cookie 也会被拒绝。`}</p>\n    <p>{`以下的 cookie 假如是被域名为 `}<inlineCode parentName=\"p\">{`example.com`}</inlineCode>{` 的服务器设置的，则会被拒绝：`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Set-Cookie: sessionId=e8bb43229de9; Domain=foo.example.com\n`}</code></pre>\n    <h3>{`Cookie 前缀`}</h3>\n    <p>{`名称中包含 `}<inlineCode parentName=\"p\">{`__Secure-`}</inlineCode>{` 或 `}<inlineCode parentName=\"p\">{`__Host-`}</inlineCode>{` 前缀的 cookie，只可以应用在使用了安全连接（HTTPS）的域中，需要同时设置 `}<inlineCode parentName=\"p\">{`secure`}</inlineCode>{` 属性。`}</p>\n    <p>{`另外，假如 cookie 以 `}<inlineCode parentName=\"p\">{`__Host-`}</inlineCode>{` 为前缀，那么 path 属性的值必须为 `}<inlineCode parentName=\"p\">{`/`}</inlineCode>{`（表示整个站点），且不能含有 `}<inlineCode parentName=\"p\">{`Domain`}</inlineCode>{` 属性。`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`警告：`}</strong>{` 对于不支持 cookie 前缀的客户端，无法保证这些附加的条件成立，所以 cookie 总是被接受的。`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{}}>{`// 当响应来自于一个安全域（HTTPS）的时候，二者都可以被客户端接受\nSet-Cookie: __Secure-ID=123; Secure; Domain=example.com\nSet-Cookie: __Host-ID=123; Secure; Path=/\n\n// 缺少 Secure 指令，会被拒绝\nSet-Cookie: __Secure-id=1\n\n// 缺少 Path=/ 指令，会被拒绝\nSet-Cookie: __Host-id=1; Secure\n\n// 由于设置了 domain 属性，会被拒绝\nSet-Cookie: __Host-id=1; Secure; Path=/; domain=example.com\n`}</code></pre>\n    <h3>{`关于兼容性的注意事项`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`从 Chrome 52 和 Firefox 52 开始，非安全站点（`}<inlineCode parentName=\"li\">{`http:`}</inlineCode>{`）已经不能在 cookie 中设置 `}<inlineCode parentName=\"li\">{`Secure`}</inlineCode>{` 属性了。`}</li>\n    </ul>\n    <h2>{`参见`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/blog/http/cookies\"\n        }}>{`HTTP cookie`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","className","scope","isMDXComponent"],"sourceRoot":""}